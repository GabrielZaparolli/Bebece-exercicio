export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Markdown: any;
  JSON: any;
  Upload: any;
  IOSanitizedString: any;
  IOUpload: any;
};
















export type Behavior = 
  | 'USER_ONLY'
  | 'USER_AND_APP'
  | 'FULL';


export type BlockInput = {
  propsJSON: Scalars['String'];
  blocks: Array<Maybe<BlockInsertionInput>>;
  after: Array<Maybe<Scalars['String']>>;
  around: Array<Maybe<Scalars['String']>>;
  before: Array<Maybe<Scalars['String']>>;
};


export type BlockInsertionInput = {
  blockId?: Maybe<Scalars['String']>;
  extensionPointId?: Maybe<Scalars['String']>;
};

export type BlockPathItem = {
  role?: Maybe<BlockPathItemRole>;
  id?: Maybe<Scalars['String']>;
};

export type BlockPathItemRole = 
  | 'TEMPLATE'
  | 'BLOCK'
  | 'AFTER'
  | 'AROUND'
  | 'BEFORE';






export type ConditionInput = {
  id?: Maybe<Scalars['String']>;
  pageContext?: Maybe<PageContextInput>;
  allMatches?: Maybe<Scalars['Boolean']>;
  statements?: Maybe<Array<Maybe<ConditionStatementInput>>>;
};


export type ConditionStatementInput = {
  subject?: Maybe<Scalars['String']>;
  verb?: Maybe<Scalars['String']>;
  objectJSON?: Maybe<Scalars['String']>;
};


export type ContentConfigurationInput = {
  allowMerge?: Maybe<Scalars['Boolean']>;
  condition?: Maybe<ConditionInput>;
  contentId?: Maybe<Scalars['String']>;
  contentJSON?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  origin?: Maybe<Scalars['String']>;
};











export type Encoding = 
  | 'ICU'
  | 'HANDLEBARS';


export type IndexedMessages = {
  from: Scalars['String'];
  messages: Array<MessageInputV2>;
};

export type InterfacePathItem = {
  id?: Maybe<Scalars['String']>;
  role?: Maybe<BlockPathItemRole>;
  index?: Maybe<Scalars['Int']>;
};

export type IoCacheControlScope = 
  | 'SEGMENT'
  | 'PUBLIC'
  | 'PRIVATE';





export type ListArgsV2 = {
  range: MessagesRange;
};



export type MessageInputV2 = {
  content: Scalars['String'];
  context?: Maybe<Scalars['String']>;
  behavior?: Maybe<Behavior>;
};


export type MessageSaveInputV2 = {
  srcLang: Scalars['String'];
  srcMessage: Scalars['String'];
  targetMessage: Scalars['String'];
  groupContext?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
};


export type MessagesRange = {
  from: Scalars['Int'];
  to: Scalars['Int'];
};




export type NewRouteInput = {
  uuid?: Maybe<Scalars['String']>;
  auth?: Maybe<Scalars['Boolean']>;
  blockId?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  interfaceId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  routeId?: Maybe<Scalars['String']>;
  pages?: Maybe<Array<Maybe<PageInput>>>;
  title?: Maybe<Scalars['String']>;
  metaTags?: Maybe<RouteMetaTagsInput>;
  bindingId?: Maybe<Scalars['String']>;
  dataSource?: Maybe<Scalars['String']>;
};

export type PageBlocksInput = {
  pathId?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  query?: Maybe<Scalars['String']>;
  depTree?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
};


export type PageContentInput = {
  extensions?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  routeId?: Maybe<Scalars['String']>;
  routeContextLocator?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  depTree?: Maybe<Scalars['String']>;
  resolvedContentType?: Maybe<ResolvedContentType>;
};



export type PageContextInput = {
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type PageInput = {
  pageId?: Maybe<Scalars['String']>;
  condition?: Maybe<ConditionInput>;
  template?: Maybe<Scalars['String']>;
};


export type PrefecthBlocksInput = {
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  query?: Maybe<Scalars['String']>;
  depTree?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
};


export type PreviewRouteInput = {
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
};






export type ResolvedContentType = {
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type RouteMetaTagsInput = {
  description?: Maybe<Scalars['String']>;
  keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SaveArgsV2 = {
  to: Scalars['String'];
  messages: Array<MessageSaveInputV2>;
  fireEvent?: Maybe<Scalars['Boolean']>;
};





export type TranslateArgs = {
  indexedByFrom: Array<IndexedMessages>;
  to: Scalars['String'];
  depTree?: Maybe<Scalars['String']>;
  encoding?: Maybe<Encoding>;
};

export type TranslateWithDependenciesArgs = {
  indexedByFrom: Array<IndexedMessages>;
  to: Scalars['String'];
  depTree: Scalars['String'];
  encoding?: Maybe<Encoding>;
};




export type UserDevice = 
  | 'desktop'
  | 'phone'
  | 'tablet'
  | 'unknown';

export type LocalesQueryVariables = Exact<{ [key: string]: never; }>;


export type LocalesQuery = { __typename?: 'Query', languages: { __typename?: 'Languages', default: string, supported: Array<string> }, currentBinding?: Maybe<{ __typename?: 'Binding', supportedLocales: Array<Maybe<string>> }> };

export {}