interface SpecificationFilter {
    facets?: any[];
    hidden: boolean;
    name: string;
    quantity: number;
    type: string;
}
interface CategoriesTrees {
    id: string;
    name: string;
    selected: boolean;
    children?: CategoriesTrees[];
}
interface QueryArgs {
    query: string;
    map: string;
}
interface Facets {
    categoriesTrees?: CategoriesTrees[];
    queryArgs?: QueryArgs;
    specificationFilters?: SpecificationFilter[];
}
interface Breadcrumb {
    name: string;
    href: string;
}
interface SearchQueryData {
    searchMetadata?: {
        titleTag: string;
        metaTagDescription: string;
    };
    productSearch?: {
        breadcrumb: Breadcrumb[];
        recordsFiltered: number;
        operator?: string;
        searchState?: string;
        correction?: {
            misspelled: boolean;
        };
    };
    facets?: Facets;
}
export interface SearchQuery {
    loading: boolean;
    products: any;
    data?: SearchQueryData;
    variables: {
        query: string;
        map: string;
    };
}
interface GetTitleTagParams {
    titleTag: string;
    storeTitle: string;
    term?: string;
    pageTitle?: string;
    pageNumber?: number;
    removeStoreNameTitle?: boolean;
}
declare type PageEventName = 'internalSiteSearchView' | 'categoryView' | 'departmentView' | 'emptySearchView';
interface Variables {
    fullText?: string;
    category?: any;
}
export declare const getPageEventName: (products: unknown[], variables: Variables) => PageEventName;
export declare const getTitleTag: ({ titleTag, storeTitle, term, pageTitle, pageNumber, removeStoreNameTitle, }: GetTitleTagParams) => string;
export declare const getDepartmentMetadata: (searchQuery?: SearchQueryData | undefined) => {
    id: any;
    name: any;
} | undefined;
export declare const getCategoryMetadata: (searchQuery?: SearchQueryData | undefined) => {
    id: string;
    name: string;
} | undefined;
export declare const getSearchMetadata: (searchQuery?: SearchQueryData | undefined) => {
    term: string | undefined;
    category: {
        id: any;
        name: any;
    } | null;
    results: number;
    operator: string | undefined;
    searchState: string | undefined;
    correction: {
        misspelled: boolean;
    } | undefined;
} | undefined;
export {};
